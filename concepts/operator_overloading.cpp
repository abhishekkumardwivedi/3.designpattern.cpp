#include<iostream>
#include<list>
#include<vector>

/**
 * @brief operator overloading
 */

class SimpleClass {
    std::string data;
    std::vector<int> v;
    public:

    /**
     * @brief Construct a new Simple Class object. This is also an example of polymorphism.
     * A default constructor generated by compiler and this as paramaterised.
     * 
     * @param data 
     */
    SimpleClass(std::string data) {
        this->data = data;
        v.begin();
    }

    void updateVector(int element) {
        v.push_back(element);
    }

    void cleanVector() {
        for (int i : v) {
            std::cout << v.size() << std::endl;
            v.pop_back();
        }
    }

    SimpleClass() {

    }

    /**
     * @brief Operator overloading ('=' operator) example
     * 
     * @param s 
     * @return SimpleClass 
     */
    SimpleClass operator = (SimpleClass s) {
        this->data = s.data;
        this->v = s.v;
    }

    std::string getData() {
        return data;
    }
};

int main() {
    SimpleClass s1("Hello");

    SimpleClass s2 = s1;
    s1.updateVector(1);
    s1.updateVector(2);
    s2.updateVector(3);
    s1.cleanVector();

    s2.cleanVector();

    std::cout << s2.getData() << std::endl;
    return 0;
}